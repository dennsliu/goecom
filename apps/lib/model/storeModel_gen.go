// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	storeFieldNames          = builder.RawFieldNames(&Store{})
	storeRows                = strings.Join(storeFieldNames, ",")
	storeRowsExpectAutoSet   = strings.Join(stringx.Remove(storeFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	storeRowsWithPlaceHolder = strings.Join(stringx.Remove(storeFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheStoreIdPrefix = "cache:store:id:"

	storeLanguageFieldNames          = builder.RawFieldNames(&StoreLanguage{})
	storeLanguageRows                = strings.Join(storeLanguageFieldNames, ",")
	storeLanguageRowsExpectAutoSet   = strings.Join(stringx.Remove(storeLanguageFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
)

type (
	storeModel interface {
		Insert(ctx context.Context, data *Store) (sql.Result, error)
		InsertLanguage(ctx context.Context, data *StoreLanguage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Store, error)
		Update(ctx context.Context, newData *Store) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStoreModel struct {
		sqlc.CachedConn
		table string
	}

	Store struct {
		Id         int64     `db:"id"`          // store id
		MerchantId int64     `db:"merchant_id"` // store Merchant id
		Status     int64     `db:"status"`      // store status(0 active, -1 inactive)
		Order      int64     `db:"order"`       // order
		CreatedAt  string `db:"created_at"`
		UpdatedAt  string `db:"updated_at"`
	}
	StoreLanguage struct {
		Storeid         int64     `db:"store_id"`          // store id
		Name string     `db:"name"` 
		Keyword     string     `db:"keyword"`     
		Description      string     `db:"description"`  
		Laguageid         int64     `db:"laguage_id"`      
		CreatedAt  string `db:"created_at"`
		UpdatedAt  string `db:"updated_at"`
	}
)

func newStoreModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultStoreModel {
	return &defaultStoreModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`store`",
	}
}

func (m *defaultStoreModel) Delete(ctx context.Context, id int64) error {
	storeIdKey := fmt.Sprintf("%s%v", cacheStoreIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, storeIdKey)
	return err
}

func (m *defaultStoreModel) FindOne(ctx context.Context, id int64) (*Store, error) {
	storeIdKey := fmt.Sprintf("%s%v", cacheStoreIdPrefix, id)
	var resp Store
	err := m.QueryRowCtx(ctx, &resp, storeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", storeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (Store) TableName() string {
    return "store"
}
func (m *defaultStoreModel) Insert(ctx context.Context, data *Store) (sql.Result, error) {
	storeIdKey := fmt.Sprintf("%s%v", cacheStoreIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, storeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MerchantId, data.Status, data.Order, data.CreatedAt, data.UpdatedAt)
	}, storeIdKey)
	return ret, err
}
func (m *defaultStoreModel) InsertLanguage(ctx context.Context, data *StoreLanguage) (sql.Result, error) {
	storeIdKey := fmt.Sprintf("%s%v", cacheStoreIdPrefix, data.Storeid+'_'+data.Laguageid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", "store_language", storeLanguageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Storeid, data.Name, data.Keyword,data.Description, data.Laguageid,  data.CreatedAt, data.UpdatedAt)
	}, storeIdKey)
	return ret, err
}

func (m *defaultStoreModel) Update(ctx context.Context, data *Store) error {
	storeIdKey := fmt.Sprintf("%s%v", cacheStoreIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, storeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MerchantId, data.Status, data.Order, data.CreatedAt, data.UpdatedAt, data.Id)
	}, storeIdKey)
	return err
}

func (m *defaultStoreModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheStoreIdPrefix, primary)
}

func (m *defaultStoreModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", storeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStoreModel) tableName() string {
	return m.table
}
