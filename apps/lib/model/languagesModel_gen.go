// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	languagesFieldNames          = builder.RawFieldNames(&Languages{})
	languagesRows                = strings.Join(languagesFieldNames, ",")
	languagesRowsExpectAutoSet   = strings.Join(stringx.Remove(languagesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	languagesRowsWithPlaceHolder = strings.Join(stringx.Remove(languagesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheLanguagesIdPrefix   = "cache:languages:id:"
	cacheLanguagesCodePrefix = "cache:languages:code:"
)

type (
	languagesModel interface {
		Insert(ctx context.Context, data *Languages) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Languages, error)
		FindOneByCode(ctx context.Context, code string) (*Languages, error)
		Update(ctx context.Context, newData *Languages) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLanguagesModel struct {
		sqlc.CachedConn
		table string
	}

	Languages struct {
		Id        int64     `db:"id"`
		Name      string    `db:"name"`      // language name
		Code      string    `db:"code"`      // language abbreviation
		Image     string    `db:"image"`     // language image
		Directory string    `db:"directory"` // language configure directory floder name
		Order     int64     `db:"order"`     // language order
		CreatedAt string `db:"created_at"`
		UpdatedAt string `db:"updated_at"`
	}
)

func newLanguagesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLanguagesModel {
	return &defaultLanguagesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`languages`",
	}
}

func (m *defaultLanguagesModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	languagesCodeKey := fmt.Sprintf("%s%v", cacheLanguagesCodePrefix, data.Code)
	languagesIdKey := fmt.Sprintf("%s%v", cacheLanguagesIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, languagesCodeKey, languagesIdKey)
	return err
}

func (m *defaultLanguagesModel) FindOne(ctx context.Context, id int64) (*Languages, error) {
	languagesIdKey := fmt.Sprintf("%s%v", cacheLanguagesIdPrefix, id)
	var resp Languages
	err := m.QueryRowCtx(ctx, &resp, languagesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", languagesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLanguagesModel) FindOneByCode(ctx context.Context, code string) (*Languages, error) {
	languagesCodeKey := fmt.Sprintf("%s%v", cacheLanguagesCodePrefix, code)
	var resp Languages
	err := m.QueryRowIndexCtx(ctx, &resp, languagesCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", languagesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, code); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLanguagesModel) Insert(ctx context.Context, data *Languages) (sql.Result, error) {
	languagesCodeKey := fmt.Sprintf("%s%v", cacheLanguagesCodePrefix, data.Code)
	languagesIdKey := fmt.Sprintf("%s%v", cacheLanguagesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, languagesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Code, data.Image, data.Directory, data.Order, data.CreatedAt, data.UpdatedAt)
	}, languagesCodeKey, languagesIdKey)
	return ret, err
}

func (m *defaultLanguagesModel) Update(ctx context.Context, newData *Languages) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	languagesCodeKey := fmt.Sprintf("%s%v", cacheLanguagesCodePrefix, data.Code)
	languagesIdKey := fmt.Sprintf("%s%v", cacheLanguagesIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, languagesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Code, newData.Image, newData.Directory, newData.Order, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	}, languagesCodeKey, languagesIdKey)
	return err
}

func (m *defaultLanguagesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheLanguagesIdPrefix, primary)
}

func (m *defaultLanguagesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", languagesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLanguagesModel) tableName() string {
	return m.table
}
