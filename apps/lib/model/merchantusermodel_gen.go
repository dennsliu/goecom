// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	merchantUserFieldNames          = builder.RawFieldNames(&MerchantUser{})
	merchantUserRows                = strings.Join(merchantUserFieldNames, ",")
	merchantUserRowsExpectAutoSet   = strings.Join(stringx.Remove(merchantUserFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	merchantUserRowsWithPlaceHolder = strings.Join(stringx.Remove(merchantUserFieldNames, "`merchant_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheMerchantUserMerchantIdPrefix = "cache:merchantUser:merchantId:"
	cacheMerchantUserIdPrefix     = "cache:merchantUser:id:"

)

type (
	merchantUserModel interface {
		Insert(ctx context.Context, data *MerchantUser) (sql.Result, error)
		FindOne(ctx context.Context, merchantId int64) (*MerchantUser, error)
		Update(ctx context.Context, newData *MerchantUser) error
		Delete(ctx context.Context, merchantId int64) error
		UserLogin(ctx context.Context, username string) (*MerchantUser, error)
	}

	defaultMerchantUserModel struct {
		sqlc.CachedConn
		table string
	}

	MerchantUser struct {
		Id          int64          `db:"id"` // merchant user id
		FirstName   string `db:"first_name"`
		MidName     string `db:"mid_name"`
		LastName    string `db:"last_name"`
		UserName    string         `db:"user_name"`
		Password    string         `db:"password"`
		Telephone   string `db:"telephone"`
		Mobliephone string `db:"mobliephone"`
		MerchantId  int64          `db:"merchant_id"` // merchantuser
		Status      int64          `db:"status"`
		CreatedAt   time.Time      `db:"created_at"`
		UpdatedAt   time.Time      `db:"updated_at"`
	}
)

func newMerchantUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultMerchantUserModel {
	return &defaultMerchantUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`merchant_user`",
	}
}

func (m *defaultMerchantUserModel) Delete(ctx context.Context, merchantId int64) error {
	merchantUserMerchantIdKey := fmt.Sprintf("%s%v", cacheMerchantUserMerchantIdPrefix, merchantId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `merchant_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, merchantId)
	}, merchantUserMerchantIdKey)
	return err
}

func (m *defaultMerchantUserModel) FindOne(ctx context.Context, merchantId int64) (*MerchantUser, error) {
	merchantUserMerchantIdKey := fmt.Sprintf("%s%v", cacheMerchantUserMerchantIdPrefix, merchantId)
	var resp MerchantUser
	err := m.QueryRowCtx(ctx, &resp, merchantUserMerchantIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `merchant_id` = ? limit 1", merchantUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, merchantId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMerchantUserModel) Insert(ctx context.Context, data *MerchantUser) (sql.Result, error) {
	merchantUserMerchantIdKey := fmt.Sprintf("%s%v", cacheMerchantUserMerchantIdPrefix, data.MerchantId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, merchantUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.FirstName, data.MidName, data.LastName, data.UserName, data.Password, data.Telephone, data.Mobliephone, data.MerchantId, data.Status, data.CreatedAt, data.UpdatedAt)
	}, merchantUserMerchantIdKey)
	return ret, err
}

func (m *defaultMerchantUserModel) Update(ctx context.Context, data *MerchantUser) error {
	merchantUserMerchantIdKey := fmt.Sprintf("%s%v", cacheMerchantUserMerchantIdPrefix, data.MerchantId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `merchant_id` = ?", m.table, merchantUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.FirstName, data.MidName, data.LastName, data.UserName, data.Password, data.Telephone, data.Mobliephone, data.Status, data.CreatedAt, data.UpdatedAt, data.MerchantId)
	}, merchantUserMerchantIdKey)
	return err
}
func (m *defaultMerchantUserModel) UserLogin(ctx context.Context, username string) (*MerchantUser, error) {
	merchantUsernameKey := fmt.Sprintf("%s%v", cacheMerchantUserIdPrefix, username)
	var resp MerchantUser
	err := m.QueryRowIndexCtx(ctx, &resp, merchantUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_name` = ? limit 1", merchantUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultMerchantUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMerchantUserMerchantIdPrefix, primary)
}

func (m *defaultMerchantUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `merchant_id` = ? limit 1", merchantUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMerchantUserModel) tableName() string {
	return m.table
}
