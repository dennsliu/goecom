// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: lib.proto

package lib

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibClient is the client API for Lib service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibClient interface {
	GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	GetMerchants(ctx context.Context, in *GetMerchantsReq, opts ...grpc.CallOption) (*GetMerchantsReply, error)
	GetMerchant(ctx context.Context, in *GetMerchantReq, opts ...grpc.CallOption) (*GetMerchantReply, error)
	GetMerchantUsers(ctx context.Context, in *GetMerchantUsersReq, opts ...grpc.CallOption) (*GetMerchantUsersReply, error)
	GetMerchantUser(ctx context.Context, in *GetMerchantUserReq, opts ...grpc.CallOption) (*GetMerchantUserReply, error)
	MerchantUserLogin(ctx context.Context, in *MerchantUserLoginReq, opts ...grpc.CallOption) (*MerchantUserLoginReply, error)
	MerchantUserRegister(ctx context.Context, in *MerchantUserRegisterReq, opts ...grpc.CallOption) (*MerchantUserLoginReply, error)
}

type libClient struct {
	cc grpc.ClientConnInterface
}

func NewLibClient(cc grpc.ClientConnInterface) LibClient {
	return &libClient{cc}
}

func (c *libClient) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	out := new(GenerateTokenResp)
	err := c.cc.Invoke(ctx, "/lib.lib/generateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libClient) GetMerchants(ctx context.Context, in *GetMerchantsReq, opts ...grpc.CallOption) (*GetMerchantsReply, error) {
	out := new(GetMerchantsReply)
	err := c.cc.Invoke(ctx, "/lib.lib/getMerchants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libClient) GetMerchant(ctx context.Context, in *GetMerchantReq, opts ...grpc.CallOption) (*GetMerchantReply, error) {
	out := new(GetMerchantReply)
	err := c.cc.Invoke(ctx, "/lib.lib/getMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libClient) GetMerchantUsers(ctx context.Context, in *GetMerchantUsersReq, opts ...grpc.CallOption) (*GetMerchantUsersReply, error) {
	out := new(GetMerchantUsersReply)
	err := c.cc.Invoke(ctx, "/lib.lib/getMerchantUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libClient) GetMerchantUser(ctx context.Context, in *GetMerchantUserReq, opts ...grpc.CallOption) (*GetMerchantUserReply, error) {
	out := new(GetMerchantUserReply)
	err := c.cc.Invoke(ctx, "/lib.lib/getMerchantUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libClient) MerchantUserLogin(ctx context.Context, in *MerchantUserLoginReq, opts ...grpc.CallOption) (*MerchantUserLoginReply, error) {
	out := new(MerchantUserLoginReply)
	err := c.cc.Invoke(ctx, "/lib.lib/merchantUserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libClient) MerchantUserRegister(ctx context.Context, in *MerchantUserRegisterReq, opts ...grpc.CallOption) (*MerchantUserLoginReply, error) {
	out := new(MerchantUserLoginReply)
	err := c.cc.Invoke(ctx, "/lib.lib/merchantUserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibServer is the server API for Lib service.
// All implementations must embed UnimplementedLibServer
// for forward compatibility
type LibServer interface {
	GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error)
	GetMerchants(context.Context, *GetMerchantsReq) (*GetMerchantsReply, error)
	GetMerchant(context.Context, *GetMerchantReq) (*GetMerchantReply, error)
	GetMerchantUsers(context.Context, *GetMerchantUsersReq) (*GetMerchantUsersReply, error)
	GetMerchantUser(context.Context, *GetMerchantUserReq) (*GetMerchantUserReply, error)
	MerchantUserLogin(context.Context, *MerchantUserLoginReq) (*MerchantUserLoginReply, error)
	MerchantUserRegister(context.Context, *MerchantUserRegisterReq) (*MerchantUserLoginReply, error)
	mustEmbedUnimplementedLibServer()
}

// UnimplementedLibServer must be embedded to have forward compatible implementations.
type UnimplementedLibServer struct {
}

func (UnimplementedLibServer) GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedLibServer) GetMerchants(context.Context, *GetMerchantsReq) (*GetMerchantsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchants not implemented")
}
func (UnimplementedLibServer) GetMerchant(context.Context, *GetMerchantReq) (*GetMerchantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (UnimplementedLibServer) GetMerchantUsers(context.Context, *GetMerchantUsersReq) (*GetMerchantUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantUsers not implemented")
}
func (UnimplementedLibServer) GetMerchantUser(context.Context, *GetMerchantUserReq) (*GetMerchantUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantUser not implemented")
}
func (UnimplementedLibServer) MerchantUserLogin(context.Context, *MerchantUserLoginReq) (*MerchantUserLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantUserLogin not implemented")
}
func (UnimplementedLibServer) MerchantUserRegister(context.Context, *MerchantUserRegisterReq) (*MerchantUserLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantUserRegister not implemented")
}
func (UnimplementedLibServer) mustEmbedUnimplementedLibServer() {}

// UnsafeLibServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibServer will
// result in compilation errors.
type UnsafeLibServer interface {
	mustEmbedUnimplementedLibServer()
}

func RegisterLibServer(s grpc.ServiceRegistrar, srv LibServer) {
	s.RegisterService(&Lib_ServiceDesc, srv)
}

func _Lib_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lib.lib/generateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibServer).GenerateToken(ctx, req.(*GenerateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lib_GetMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibServer).GetMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lib.lib/getMerchants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibServer).GetMerchants(ctx, req.(*GetMerchantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lib_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lib.lib/getMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibServer).GetMerchant(ctx, req.(*GetMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lib_GetMerchantUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibServer).GetMerchantUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lib.lib/getMerchantUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibServer).GetMerchantUsers(ctx, req.(*GetMerchantUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lib_GetMerchantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibServer).GetMerchantUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lib.lib/getMerchantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibServer).GetMerchantUser(ctx, req.(*GetMerchantUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lib_MerchantUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibServer).MerchantUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lib.lib/merchantUserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibServer).MerchantUserLogin(ctx, req.(*MerchantUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lib_MerchantUserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantUserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibServer).MerchantUserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lib.lib/merchantUserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibServer).MerchantUserRegister(ctx, req.(*MerchantUserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Lib_ServiceDesc is the grpc.ServiceDesc for Lib service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lib_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lib.lib",
	HandlerType: (*LibServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "generateToken",
			Handler:    _Lib_GenerateToken_Handler,
		},
		{
			MethodName: "getMerchants",
			Handler:    _Lib_GetMerchants_Handler,
		},
		{
			MethodName: "getMerchant",
			Handler:    _Lib_GetMerchant_Handler,
		},
		{
			MethodName: "getMerchantUsers",
			Handler:    _Lib_GetMerchantUsers_Handler,
		},
		{
			MethodName: "getMerchantUser",
			Handler:    _Lib_GetMerchantUser_Handler,
		},
		{
			MethodName: "merchantUserLogin",
			Handler:    _Lib_MerchantUserLogin_Handler,
		},
		{
			MethodName: "merchantUserRegister",
			Handler:    _Lib_MerchantUserRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib.proto",
}
