// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productBrandFieldNames          = builder.RawFieldNames(&ProductBrand{})
	productBrandRows                = strings.Join(productBrandFieldNames, ",")
	productBrandRowsExpectAutoSet   = strings.Join(stringx.Remove(productBrandFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	productBrandRowsWithPlaceHolder = strings.Join(stringx.Remove(productBrandFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheProductBrandIdPrefix = "cache:productBrand:id:"
)

type (
	productBrandModel interface {
		Insert(ctx context.Context, data *ProductBrand) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductBrand, error)
		Update(ctx context.Context, newData *ProductBrand) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductBrandModel struct {
		sqlc.CachedConn
		table string
	}

	ProductBrand struct {
		Id         int64          `db:"id"`          // product brand id
		Order      int64          `db:"order"`       // product brand order
		Status     int64          `db:"status"`      // product brand status(0 active,-1 inactive)
		MerchantId sql.NullInt64  `db:"merchant_id"` // MerchantId
		ParentId   int64          `db:"parent_id"`
		Code       sql.NullString `db:"code"`
		CreatedAt  string      `db:"created_at"`
		UpdatedAt  string      `db:"updated_at"`
	}
)

func newProductBrandModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProductBrandModel {
	return &defaultProductBrandModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`product_brand`",
	}
}

func (m *defaultProductBrandModel) Delete(ctx context.Context, id int64) error {
	productBrandIdKey := fmt.Sprintf("%s%v", cacheProductBrandIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, productBrandIdKey)
	return err
}

func (m *defaultProductBrandModel) FindOne(ctx context.Context, id int64) (*ProductBrand, error) {
	productBrandIdKey := fmt.Sprintf("%s%v", cacheProductBrandIdPrefix, id)
	var resp ProductBrand
	err := m.QueryRowCtx(ctx, &resp, productBrandIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productBrandRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductBrandModel) Insert(ctx context.Context, data *ProductBrand) (sql.Result, error) {
	productBrandIdKey := fmt.Sprintf("%s%v", cacheProductBrandIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, productBrandRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Order, data.Status, data.MerchantId, data.ParentId, data.Code, data.CreatedAt, data.UpdatedAt)
	}, productBrandIdKey)
	return ret, err
}

func (m *defaultProductBrandModel) Update(ctx context.Context, data *ProductBrand) error {
	productBrandIdKey := fmt.Sprintf("%s%v", cacheProductBrandIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productBrandRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Order, data.Status, data.MerchantId, data.ParentId, data.Code, data.CreatedAt, data.UpdatedAt, data.Id)
	}, productBrandIdKey)
	return err
}

func (m *defaultProductBrandModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheProductBrandIdPrefix, primary)
}

func (m *defaultProductBrandModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productBrandRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductBrandModel) tableName() string {
	return m.table
}
